import java.util.*;

class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        int[] queens = new int[n];                 // queens[row] = col
        Arrays.fill(queens, -1);

        boolean[] cols = new boolean[n];           // columns used
        boolean[] d1 = new boolean[2 * n - 1];     // main diagonals (r - c + n - 1)
        boolean[] d2 = new boolean[2 * n - 1];     // anti diagonals (r + c)

        backtrack(0, n, queens, cols, d1, d2, res);
        return res;
    }

    private void backtrack(int row, int n, int[] queens,
                           boolean[] cols, boolean[] d1, boolean[] d2,
                           List<List<String>> res) {
        if (row == n) {
            res.add(buildBoard(queens, n));
            return;
        }

        for (int c = 0; c < n; c++) {
            int id1 = row - c + (n - 1);
            int id2 = row + c;
            if (cols[c] || d1[id1] || d2[id2]) continue;

            queens[row] = c;
            cols[c] = d1[id1] = d2[id2] = true;

            backtrack(row + 1, n, queens, cols, d1, d2, res);

            cols[c] = d1[id1] = d2[id2] = false;
            queens[row] = -1;
        }
    }

    private List<String> buildBoard(int[] queens, int n) {
        List<String> board = new ArrayList<>(n);
        for (int r = 0; r < n; r++) {
            char[] row = new char[n];
            Arrays.fill(row, '.');
            row[queens[r]] = 'Q';
            board.add(new String(row));
        }
        return board;
    }
}
