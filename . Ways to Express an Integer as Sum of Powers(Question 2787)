class Solution {
    private static final int MOD = 1_000_000_007;

    public int numberOfWays(int n, int x) {
        // 1) Build list of i^x <= n (as ints)
        java.util.List<Integer> powers = new java.util.ArrayList<>();
        for (int i = 1; ; i++) {
            long p = powBounded(i, x, n);
            if (p > n) break;
            powers.add((int) p);
        }

        // 2) 0/1 knapsack count
        int[] dp = new int[n + 1];
        dp[0] = 1;

        for (int p : powers) {
            for (int s = n; s >= p; s--) {
                dp[s] += dp[s - p];
                if (dp[s] >= MOD) dp[s] -= MOD;
            }
        }
        return dp[n];
    }

    // Fast power with early stop if value exceeds limit (avoids double precision issues)
    private long powBounded(long base, int exp, int limit) {
        long res = 1;
        long b = base;
        int e = exp;
        while (e > 0) {
            if ((e & 1) == 1) {
                res *= b;
                if (res > limit) return limit + 1L; // early exit
            }
            e >>= 1;
            if (e > 0) {
                b *= b;
                if (b > limit) b = limit + 1L; // cap to trigger early exit soon
            }
        }
        return res;
    }
}
